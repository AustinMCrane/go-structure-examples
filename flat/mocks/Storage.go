// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// FindBeer provides a mock function with given fields: _a0
func (_m *Storage) FindBeer(_a0 Beer) ([]Beer, error) {
	ret := _m.Called(_a0)

	var r0 []Beer
	if rf, ok := ret.Get(0).(func(Beer) []Beer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Beer) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBeers provides a mock function with given fields:
func (_m *Storage) FindBeers() ([]Beer, error) {
	ret := _m.Called()

	var r0 []Beer
	if rf, ok := ret.Get(0).(func() []Beer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Beer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindReview provides a mock function with given fields: _a0
func (_m *Storage) FindReview(_a0 Review) ([]Review, error) {
	ret := _m.Called(_a0)

	var r0 []Review
	if rf, ok := ret.Get(0).(func(Review) []Review); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Review)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Review) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBeer provides a mock function with given fields: _a0
func (_m *Storage) SaveBeer(_a0 ...Beer) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...Beer) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveReview provides a mock function with given fields: _a0
func (_m *Storage) SaveReview(_a0 ...Review) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...Review) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
